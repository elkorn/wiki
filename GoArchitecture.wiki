= Go - Architecture =
%toc

== Structuring applications ==
=== Don't use global variables ===

The prime example is `net/http`'s `handleFunc`. The simplest way is to pass a function there:
{{{
package main
import (
 “fmt”
 “net/http”
)
func main() {
    http.HandleFunc(“/hello”, hello)
    http.ListenAndServe(“:8080", nil)
}
func hello(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, “hi!”)
}
}}}

Unfortunately, ay state has to be accessed through a global variable then.

A better alternative is to use an encompassing type:
{{{
type HelloHandler struct {
    db *sql.DB
}
func (h *HelloHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    var name string
    // Execute the query.
    row := h.db.QueryRow(“SELECT myname FROM mytable”)
    if err := row.Scan(&name); err != nil {
        http.Error(w, err.Error(), 500)
        return
    }
    // Write it back to the client.
    fmt.Fprintf(w, “hi %s!\n”, name)
}

func main() {
    // Open our database connection.
    db, err := sql.Open(“postgres”, “…”)
    if err != nil {
        log.Fatal(err)
    }
    // Register our handler.
    http.Handle(“/hello”, &HelloHandler{db: db})
    http.ListenAndServe(“:8080", nil)
}
}}}

See that the state has been nicely encapsulated.
Also, the handler becomes unit-testable.

=== Separate your binary from your application ===

Placing the `main.go` file along with the binary causes the appliaction to be unusable as a library and constrains it to have only one binary.

A more flexible approach is to use an `src` (or whatever) directory, whose each subdir is effectively a binary:
{{{
camlistore/
  cmd/
    camget/
      main.go
    cammount/
      main.go
    camput/
      main.go
    camtool/
      main.go
}}}

Additional benefit of this approach is that you get a cleaner abstraction of what code belongs to the core domain logic and what is just a client.
Remember that a binary is a client for the library you are creating, an interface for the user to interact with it.
An example of an `adder` package, sproting a CLI and a Web interface:
{{{
adder/
  adder.go          // core
  cmd/
    adder/
      main.go       // CLI
    adder-server/
      main.go       // Web
}}}

To install the whole bundle, use `go get` with an ellipsis: `go get github.com/elkorn/adder/...`.

=== Wrap types for application-specific context ===

This is a universal rule - create proxies that access underlying generic components only through specific, application-bound context.
A good example is the database:
{{{
package myapp
import (
    "database/sql"
)
type DB struct {
    *sql.DB
}
type Tx struct {
    *sql.Tx
}

// Open returns a DB reference for a data source.
func Open(dataSourceName string) (*DB, error) {
    db, err := sql.Open("postgres", dataSourceName)
    if err != nil {
        return nil, err
    }
    return &DB{db}, nil
}
// Begin starts an returns a new transaction.
func (db *DB) Begin() (*Tx, error) {
    tx, err := db.DB.Begin()
    if err != nil {
        return nil, err
    }
    return &Tx{tx}, nil
}

// CreateUser creates a new user.
// Returns an error if user is invalid or the tx fails.
func (tx *Tx) CreateUser(u *User) error {
    // Validate the input.
    if u == nil {
        return errors.New("user required")
    } else if u.Name == "" {
        return errors.New("name required")
    }

    // Perform the actual insert and return any errors.
    return tx.Exec(`INSERT INTO users (...) VALUES`, ...)
}
}}}

The context is isolated in a relevant component, which exposes a simple API that can accomodate any changes You might want to introduce later.

The `Tx` example provides an additional boon of transactional composition, e.g. for creating multiple users:
{{{
tx, _ := db.Begin()
for _, u := range users {
    tx.CreateUser(u)
}
tx.Commit()
}}}

=== Don't go crazy with subpackages ===

The most important thing to note here is that the need for a packagae should be dictated by logical functionality, not the number of files.
Larger packages are OK.

A few points to take heed of:
# *Group related types and code together in each file.*
# *The most important type goes at the top.* Types of decreasing importance go lower.
# *Once your app exceeds 10k loc*, reevaluate ts structure in the context of whether could it be broken into smaller projects.

== Structuring tests ==

(from https://medium.com/@benbjohnson/structuring-tests-in-go-46ddee7a25c)

=== Don't use frameworks ===
Go's `testing` is good enough.
Author proposes the following helpers to make assertions less verbose:
{{{
import (
    "fmt"
    "path/filepath"
    "runtime"
    "reflect"
    "testing"
)

// assert fails the test if the condition is false.
func assert(tb testing.TB, condition bool, msg string, v ...interface{}) {
    if !condition {
        _, file, line, _ := runtime.Caller(1)
        fmt.Printf("\033[31m%s:%d: "+msg+"\033[39m\n\n", append([]interface{}{filepath.Base(file), line}, v...)...)
        tb.FailNow()
    }
}

// ok fails the test if an err is not nil.
func ok(tb testing.TB, err error) {
    if err != nil {
        _, file, line, _ := runtime.Caller(1)
        fmt.Printf("\033[31m%s:%d: unexpected error: %s\033[39m\n\n", filepath.Base(file), line, err.Error())
        tb.FailNow()
    }
}

// equals fails the test if exp is not equal to act.
func equals(tb testing.TB, exp, act interface{}) {
    if !reflect.DeepEqual(exp, act) {
        _, file, line, _ := runtime.Caller(1)
        fmt.Printf("\033[31m%s:%d:\n\n\texp: %#v\n\n\tgot: %#v\033[39m\n\n", filepath.Base(file), line, exp, act)
        tb.FailNow()
    }
}
}}}

Benefit:

{{{
// Before
func TestSomething(t *testing.T) {
    value, err := DoSomething()
    if err != nil {
        t.Fatalf("DoSomething() failed: %s", err)
    }
    if value != 100 {
        t.Fatalf("expected 100, got: %d", value)
    }
}

// After
func TestSomething(t *testing.T) {
    value, err := DoSomething()
    ok(t, err)
    equals(t, 100, value)
}
}}}

=== Use the '..._test' package ===

E.g. for `package myapp`, keep the following files in its directory:
- `myapp.go`
- `myapp_test.go`

Then, specify `package myapp_test` in `myapp_test.go`.
Such setup will help maintain the proper visibility of things while testing.

Also, it's the only case where Go will allow multiple packages in one directory.

=== Use test-specific types ===

For example, set up a test database using a temp file and providing a `close` function for simple teardown.

{{{
type TestDB struct {
    *DB // the original application-specific DB type
}
// NewTestDB returns a TestDB using a temporary path.
func NewTestDB() *TestDB {
    // Retrieve a temporary path.
    f, err := ioutil.TempFile("", "")
    if err != nil {
        panic("temp file: %s", err)
    }
    path := f.Name()
    f.Close()
    os.Remove(path)
    // Open the database.
    db, err := Open(path, 0600)
    if err != nil {
        panic("open: %s", err)
    }
    // Return wrapped type.
    return &TestDB{db}
}
// Close and delete Bolt database.
func (db *TestDB) Close() {
    defer os.Remove(db.Path())
    db.DB.Close()
}
}}}

=== Use inline interfaces and simple mocks ===

The idea is that the caller should create the interface it wants 
instead of the callee having to provide one.

An example is given based on a Yo app client.
{{{
package yo
type Client struct {}
// Send sends a "yo" to someone.
func (c *Client) Send(recipient string) error
// Yos retrieves a list of my yo's.
func (c *Client) Yos() ([]*Yo, error)
}}}

To make it able to send Yo's, the following can be declared.
{{{
package myapp
type MyApplication struct {
    YoClient interface {
        Send(string) error
    }
}
func (a *MyApplication) Yo(recipient string) {
    return a.YoClient.Send(recipient)
}
}}}

In `main.go`, a client can be injected.
{{{
package main
func main() {
    c := yo.NewClient()
    a := myapp.MyApplication{}
    a.YoClient = c
    ...
}
}}}

As well as in tests.
{{{
package myapp_test
// TestYoClient provides mockable implementation of yo.Client.
type TestYoClient struct {
    SendFunc func(string) error
}
func (c *TestYoClient) Send(recipient string) error {
    return c.SendFunc(recipient)
}
func TestMyApplication_SendYo(t *testing.T) {
    c := &TestYoClient{}
    a := &MyApplication{YoClient: c}
    // Mock our send function to capture the argument.
    var recipient string
    c.SendFunc = func(s string) error {
        recipient = s
        return nil
    }
    // Send the yo and verify the recipient.
    err := a.Yo("susy")
    ok(t, err)
    equals(t, "susy", recipient)
}
}}}
