%toc

= The BMEAN stack =

It's the MEAN stack extended with Breeze.js for advanced client-side data
storage. Example application:

https://github.com/dai-shi/notes-app-sample

= Fit.js =

Fitting things into other things.

http://soulwire.github.io/fit.js/

= jQuery notebook =

Like Aloha, only lighter.

http://raphaelcruzeiro.github.io/jquery-notebook/

= localForage =

Mozilla's abstraction over `localStorage`, IndexedDB and WebSQL. The underlying
driver is chosen automatically.

https://hacks.mozilla.org/2014/02/localforage-offline-storage-improved/

https://github.com/mozilla/localForage

= Sculpt =

A collection of node.js transform stream utilities for data manipulation.

https://github.com/Obvious/sculpt

= BipIO =

An API server, similar to what IFTTT does.

Works on Node, RabbitMQ and MongoDB.

https://github.com/bipio-server/bipio

= jspm =

Looks like an alternative for Bower.

https://github.com/jspm/jspm-cli

= Mockery =
Allows mocking.

https://github.com/mfncooper/mockery

= Rewire =
Dependency injection in JS - allows rewiring private variables in modules.

https://github.com/jhnns/rewire

= Sinon =
A mocking/stubbing library

http://sinonjs.org/

= Supervizer =

A node.js daemon process manager to spawn/start/stop node apps.

https://github.com/oOthkOo/supervizer

= Webpack =
Webpack is a module bundler. 
It takes modules with dependencies and emits static assets representing that modules.

http://webpack.github.io/

= Gulp recipes =
A set of recipes for quickly creating performant Gulp tasks.

https://github.com/gulpjs/gulp/tree/master/docs/recipes

= Please JS = 

A simple tool for generating pleasing colors.

https://github.com/Fooidge/PleaseJS

= spots, functional pipeline, potential point-free  =

https://github.com/bahmutov/spots
https://github.com/bahmutov/functional-pipeline
https://github.com/bahmutov/eslint-rules

Spots allow to do tacit programming easier by selective partial application e.g.
{{{
var S = require('spots');
[3,6,9].map(S(div, S, 3));

S(div,S,3)(6) === div(6,3); // true
}}}

This can be combined with the `functional-pipeline` lib to create more complicated combinators e.g.
{{{
var S = require('spots');
var fp = require('functional-pipeline');
['3','6','9'].map(
    fp(
        S(parseInt, S, 10),
        S(div, S, 3)));
}}}

A nice plus is the `potential-point-free` plugin for `eslint` which detects functions that can be made tacit.
{{{
/* eslint potential-point-free:1 */
function print(x) {
  console.log(x);
}
[1, 2, 3].forEach(function printX(x) {
  print(x);
});

// eslint
$ eslint --rulesdir .. test.js 
test.js
   7:18  warning  printX   potential-point-free
âœ– 1 problem
}}}
