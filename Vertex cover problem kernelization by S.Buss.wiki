= VC kernelization by S.Buss =

# If $v$ is a vertex of degree greater than $k$, remove $v$ from the graph and decrease $k$ by one. Every vertex cover of size $k$ must contain $v$, since otherwise too many of its neighbors would have to be picked to cover the incident edges. Thus, *an additional vertex cover for the original graph may be formed from a cover of the reduced problem by adding $v$ back to the cover*.
# If $v$ is an isolated vertex, remove it. An isolated vertex cannot cover any edges, so it cannot be a part of a vertex cover.
# If more than $k^2$ edges remain in the graph and neither of the previous two rules can be applied, then the graph cannot contain a vertex cover of size $k$. For, after eliminating all vertices of degree greater than $k$, each remaining vertex can only cover at most $k$ edges and a set of $k$ vertices could only cover at most $k^2$ edges. In this case, the graph may be replaced by the complete graph $K_{k+1}$, which also has no $k$-vertex cover.

An algorithm applying these rules immediately until no more reductions are
possible terminates with a kernel of at most $k^2$ edges and $2k^2$ vertices.
(because there are no isolated vertices left and each edge connects max. 2
vertices)

This algorithm can be implemented in linear time.

After that, the vertex cover problem may be solved using a brute force search
algorithm, testing whether each subset of the kernel is a covert of the kernel.

The problem can then be solved efficiently for small $k$, for a graph with
$n$ vertices and $m$ edges ($O(2^{k^2}+n+m)$).

