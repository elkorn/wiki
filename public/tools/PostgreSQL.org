#+FILETAGS: :vimwiki:

* PostgreSQL
** Tools - PostgreSQL
# %toc

An adequate definition would be an 'SQL standard implementation, kept
up-to-date'.

*** Feature highlights

**** User-defined data and index types, functional languages
**** Table inheritance
**** A sophisticated locking mechanism
**** Foreign key referential integrity
**** Views, rules, sub-select
**** Nested transactions (savepoints)
**** Multi-version concurrency control
**** Async replication

*** Roles

Managing roles (case-sensitive, the semicolon also matters):
#+begin_example
CREATE ROLE name;
DROP ROLE name;
SELECT rolname FROM pg_roles;
#+end_example

To check existing roles, use `\du`.

**** Role attributes

To be able to login with a role:
#+begin_example
CREATE ROLE name LOGIN;
// equivalent to:
CREATE USER name;
#+end_example

*Superuser status*: bypassess all perm checks except the login right.
Recommendations are similar to those related to being a root user.

#+begin_example
CREATE ROLE name SUPERUSER;
#+end_example

*Role creation*, as well as dropping other roles, managing role membership.
#+begin_example
CREATE ROLE name CREATEROLE;
#+end_example

*Initiating replication*: a role allowed to initiate streaming replication must
 have the `LOGIN` privilege as well.

 #+begin_example
CREATE ROLE name REPLICATION LOGIN;
 #+end_example

*Password*: only significant if the client auth requires it for DB connection.
 DB passwords are separate from OS passwords.

 #+begin_example
CREATE ROLE name PASSWORD 'secret';
 #+end_example

Role's attributes can be modified through `ALTER ROLE`.
#+begin_example
ALTER ROLE name WITH option
#+end_example

    *Tip*: It is good practice to create a role that has the `CREATEDB` and `CREATEROLE`
    privileges, but is not a superuser, and then use this role for all routine
    management of databases and roles. This approach avoids the dangers of operating
    as a superuser for tasks that do not really require it.

*** Tablespaces
Tablespaces define physical locations for database data.

#+begin_example
CREATE TABLESPACE dvdrental LOCATION 'c:\data\dvdrental';
// and then...
ALTER DATABASE dvdrental
SET TABLESPACE dvdrental;
#+end_example

*** Examples

All examples are assuming that the `dvdrental` database (available [[http://www.postgresqltutorial.com/?wpdmact=process&did=MS5ob3RsaW5r][here]] is
imported).

**** SELECT

#+begin_example
SELECT 
    first_name,
    last_name,
    email
FROM customer;
#+end_example

*Distinct*:
Preparation code:
#+begin_example
CREATE TABLE t1 (
    id serial NOT NULL PRIMARY KEY,
        bcolor VARCHAR (25),
        fcolor VARCHAR (25)
    );
INSERT INTO t1 (bcolor, fcolor)
VALUES
    ('red', 'red'),
    ('red', 'red'),
    ('red', NULL),
    (NULL, 'red'),
    ('red', 'green'),
    ('red', 'blue'),
    ('green', 'red'),
    ('green', 'blue'),
    ('green', 'green'),
    ('blue', 'red'),
    ('blue', 'green'),
    ('blue', 'blue');
#+end_example

Multiple values combined to form distinction:
#+begin_example
SELECT DISTINCT
    bcolor,
    fcolor
FROM
    t1
ORDER BY
    bcolor,
    fcolor;
#+end_example

Order by bcolor and fcolor and keep the first row for each duplicate group in 
the result set.
The column taken to `ON` is the distinction criterion.
#+begin_example
SELECT DISTINCT
    ON (bcolor) bcolor,
    fcolor
FROM
    t1
ORDER BY
    bcolor,
    fcolor;
#+end_example

**** LIKE
Works as in MS SQL, pattern matching is worth noting.

#+begin_example
SELECT
    first_name,
        last_name
FROM
    customer
WHERE
    first_name LIKE 'Jen%';
#+end_example

#+begin_example
SELECT
    first_name,
        last_name
FROM
    customer
WHERE
    first_name LIKE '_en__';
#+end_example

***** `%` maches any sequence of characters
***** `_` matches any single character

`ILIKE` is a case insensitive variant of `LIKE`.
One can also use `NOT LIKE` or `NOT ILIKE`.

**** IN
A sensible use case:
#+begin_example
SELECT
    first_name,
    last_name
FROM
    customer
WHERE
    customer_id IN (
        SELECT
            customer_id
        FROM
            rental
        WHERE
            CAST (return_date AS DATE) = '2005-05-27'
    );
#+end_example

**** UNION
Combines result sets of N `SELECT` statements into a single result set.

***** Both queries must return the same number of columns.
***** The corresponding columns in the queries must have compatible data types.

#+begin_example
SELECT *
FROM
    table1
UNION
SELECT *
FROM
    table2;
#+end_example

By default, it removes duplicate rows.
To avoid that, use `UNION ALL`.

It's important to remember that when using `ORDER BY` for results of `UNION`,
you can sort each set separately, or sort the whole result set together.

#+begin_example
SELECT *
FROM
    table1
UNION ALL
SELECT *
FROM
    table2
ORDER BY
 column1 ASC,
 column2 DESC;
#+end_example

**** JOIN
`INNER JOIN` takes a common result set from the joined sets. Same as in MS SQL.

#+begin_example
SELECT
    customer.customer_id,
    customer.first_name customer_first_name,
    customer.last_name customer_last_name,
    customer.email,
    staff.first_name staff_first_name,
    staff.last_name staff_last_name,
    amount,
    payment_date
FROM
    customer
INNER JOIN payment ON payment.customer_id = customer.customer_id
INNER JOIN staff ON payment.staff_id = staff.staff_id;
#+end_example

`LEFT JOIN` is outer for set A and inner for set B.
#+begin_example
SELECT
    film.film_id,
    film.title,
    inventory_id
FROM
    film
LEFT JOIN inventory ON inventory.film_id = film.film_id
WHERE
    inventory.film_id IS NULL;
#+end_example

**** HAVING

Can be used to pass additional conditions after a `GROUP BY`.

#+begin_example
SELECT
    customer_id,
    SUM (amount)
FROM
    payment
GROUP BY
    customer_id
HAVING
    SUM (amount) > 200;
#+end_example

**** Subquery
PostgreSQL executes the query that contains a subquery in the following sequence:

***** Executes the subquery.
***** Gets the result and passes it to the outer query.
***** Executes the outer query.

#+begin_example
SELECT
    film_id,
    title
FROM
    film
WHERE
    film_id IN (
        SELECT
            inventory.film_id
        FROM
            rental
        INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
        WHERE
            return_date BETWEEN '2005-05-29'
        AND '2005-05-30'
    );
#+end_example

#+begin_example
SELECT
    first_name,
    last_name
FROM
    customer
WHERE
    EXISTS (
        SELECT
            1
        FROM
            payment
        WHERE
            payment.customer_id = customer.customer_id
    );
#+end_example

**** INSERT
Multiple rows can be added at a time.
#+begin_example
INSERT INTO table (column1, column2, …)
VALUES
    (value1, value2, …),
    (value1, value2, …) ,...;
#+end_example

Also, data from another table can be transferred.
#+begin_example
INSERT INTO table(value1,value2,...)
SELECT column1,column2,...
FROM another_table
WHERE condition;
#+end_example

A value from the last inserted row can be returned.
#+begin_example
INSERT INTO link (url, NAME, last_update)
VALUES('http://www.postgresql.org','PostgreSQL',DEFAULT) 
RETURNING id;
#+end_example

**** UPDATE
An interesting construct is the `UPDATE JOIN`:
#+begin_example
UPDATE link_tmp
SET rel = link.rel,
 description = link.description,
 last_update = link.last_update
FROM
    link
WHERE
    link_tmp.id = link.id;
#+end_example

**** DELETE
Another tables can be referenced in a `DELETE`:

#+begin_example
DELETE FROM table
USING another_table
WHERE table.id = another_table.id AND …
#+end_example

*** Data types

**** Character
***** A single character: `char`
***** Fixed-length character strings: `char(n)`. If you insert a string that is shorter than the length of the column, PostgreSQL will pad spaces. If you insert a string that is longer than the length of the column, PostgreSQL will issue an error.
***** Variable-length character strings: `varchar(n)`. You can store up to n characters with variable-length character strings. PostgreSQL does not pad spaces when the stored string is shorter than the length of the column.

**** Integer
***** Small integer (`smallint`)  is 2-byte signed integer that has a range of (-32768,32767)
***** Integer (`int`) is 4-byte integer that has a range of (-214783648, -214783647)
***** `serial` is the same as integer except that PostgreSQL populate value into the column automatically. This is similar to `AUTO_INCREMENT` attribute in other database management systems.

**** Floating-point number
***** `float(n)`  is a floating-point number whose precision at least n, up to a maximum of 8 bytes.
***** `real` or `float8` is a double-precision (8-byte) floating-point number.
***** `numeric` or `numeric(p,s)` is a real number with p digits with s number after decimal point. The `numeric(p,)` is exact number.

**** Temporal
***** `date` stores date data
***** `time` stores time data
***** `timestamp` stores data and time
***** `interval` stores the difference in timestamps
***** `timestamptz` store both timestamp and timezone data. The `timestamptz` is a PostgreSQL’s extension to the temporal data type.

**** Special
***** `box` - a rectangular box.
***** `line`  - a set of points.
***** `point` - a geometric pair of numbers.
***** `lseg` - a line segment.
***** `polygon` - a closed geometric.
***** `inet` - an IP4 address.
***** `macaddr` - a MAC address.

*** Table mgmt
**** CREATE TABLE
Available column constraints:
***** `NOT NULL` - the value of the column cannot be `NULL`.
***** `UNIQUE` - the value of the column must be different for each row in the table. However, the column can have many NULL values because PostgreSQL treats each NULL value to be unique. Notice that SQL standard only allows one NULL value in the column that has `UNIQUE` constraint.
***** `PRIMARY KEY` - this constraint is the combination of `NOT NULL` and `UNIQUE` constraints. You can define one column as `PRIMARY KEY` by using column-level constraint. In case the primary key has multiple columns, you must use the table-level constraint.
***** `CHECK` - enables to check a condition when you insert or update data.
***** `REFERENCES` - constrains the value of the column that exists in a column in another table.

All of those, except `NOT NULL`, can also serve as table constraints.

**** ALTER TABLE
Noteworthy: instead of `exec SP_RENAME`, the following can be used.
#+begin_example
ALTER TABLE table_name RENAME COLUMN column_name TO new_column_name;
#+end_example

This also applies to tables.

**** TRUNCATE TABLE
This command allows to wipe data from large tables quickly.
#+begin_example
TRUNCATE TABLE table_name;

TRUNCATE TABLE table_name RESET IDENTITY;

TRUNCATE TABLE table_name1, table_name2, …

TRUNCATE TABLE table_name CASCADE;  // also removes data related by foreign keys
#+end_example

*** Database mgmt
**** Restoring a DB
#+begin_example
postgres=# CREATE DATABASE newdvdrental;
#+end_example

and from Bash:
#+begin_example
>pg_restore --dbname=newdvdrental --verbose c:\pgbackup\dvdrental.tar
#+end_example
