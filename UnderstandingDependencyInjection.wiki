%toc
= The provider (`$provide`) =
Providers define services. To define a `provider`, you need to call the `$provider.provide` method:

{{{class="brush:js"
app.config(function($provide) {
  $provide.provider('greeting', function() {
    this.$get = function() {
      return function(name) {
        alert("Hello, " + name);
      };
    };
  });
});
}}}

After doing this, a service called `greeting` can be injected through a variable with the same name. Angular will call the provider's `$get` method underneath.

{{{class="brush: js"
app.config(function($provide) {
  $provide.provider('greeting', function() {
    this.$get = function() {
      return function(name) {
        alert("Hello, " + name);
      };
    };
  });
});
}}}

== `factory`, `service` and `value` ==
These methods are just wrappers on the `$provider.provide`, allowing different ways of definition.
The equivalent of the `greeting` provider would be:

{{{class="brush: js"
app.config(function($provide) {
  $provide.factory('greeting', function() {
    return function(name) {
      alert("Hello, " + name);
    };
  });
});
}}}

`value` works the same *if* whatever that's being returned from the factory function *does not change*.

== `module` shorctut for providing ==
AngularJS exposes the `$provider` methods directly on a module object, so the same results can be achieved by typing simply: 

{{{brush="class: js"
var myMod = angular.module('myModule', []);

myMod.provider("greeting", ...);
myMod.factory("greeting", ...);
myMod.value("greeting", ...);
}}}

To summarize, the following do *exactly* the same:

{{{class="brush: js"
myMod.provider('greeting', function() {
  this.$get = function() {
    return function(name) {
      alert("Hello, " + name);
    };
  };
});

myMod.factory('greeting', function() {
  return function(name) {
    alert("Hello, " + name);
  };
});

myMod.value('greeting', function(name) {
  alert("Hello, " + name);
});
}}}

= The injector (`$injector`) =
The injector creates instances of the services defined by the `$provide` code that has been created.
To use `$injector`, it has to itself be injected into the parameters of e.g. a controller. Then the following can be used:

{{{class="brush: js"
var greeting = $injector.get('greeting');
greeting('Ford Prefect');
}}}

Services can also be injected into functions:

{{{class="brush: js"
var greeting = $injector.get('greeting');
greeting('Ford Prefect');
}}}

Services can be injected into *any function that is called with `$injector.invoke`*, including:
* controller/directive/filter definition functions,
* the `$get` methods of providers.

= Configuring providers =
Providers can be configured to define how a given service is constructed. The configuraiton code can be added into the `config` phase of a module as such:

{{{class="brush: js"
myMod.config(function(greeting) {
  // WON'T WORK -- greeting is an *instance* of a service.
  // Only providers for services can be injected in config blocks.
});

myMod.config(function(greetingProvider) {
  // a-ok!
});
}}}

There is one important exception: `constants`, since they cannot be changed, are allowed to be injected inside `config` blocks (this is how they differ from `value`s). They are accessed by their name alone (no `Provider` suffix necessary).

Example of what can be done with provider configuration:

{{{class="brush: js"
myMod.provider('greeting', function() {
  var text = 'Hello, ';
      
  this.setText = function(value) {
    text = value;
  };
      
  this.$get = function() {
    return function(name) {
      alert(text + name);
    };
  };
});

myMod.config(function(greetingProvider) {
  greetingProvider.setText("Howdy there, ");
});

myMod.run(function(greeting) {
  greeting('Ford Prefect');
});
}}}

= Controllers, filters and directives =
Filters and directives work analogously to controllers in this context.

Controllers can be injected into, but cannot be injected themselves - they're created by a built-in Angular `$controller` service. 

When defining a controller:

{{{class="brush: js"
myMod.controller('MainController', function($scope) {
  // ...
});
}}}

What is actually being done is:

{{{class="brush: js"
myMod.config(function($controllerProvider) {
  controllerProvider.register('MainController', function($scope) {
    // ...
  });
});
}}}

For instantiating controllers, Angular uses the `$controller` service, which underneath uses the `$injector`.

= Summary =
So, to summarize, any function that gets called with `$injector.invoke` *can be injected into*. This includes, but is not limited to:

*controller
*directive
*factory
*filter
*provider `$get` (when defining provider as an object)
*provider function (when defining provider as a constructor function)
*service

The provider creates new services that *can be injected into things*. This includes:

*constant
*factory
*provider
*service
*value
