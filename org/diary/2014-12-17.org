#+FILETAGS: :vimwiki:

* 2014-12-17
** JUG - Continuous Delivery

http://www.oakfusion.pl/

12 practices of agile

Release - make a feature accessible to users
Deploy - put the newest version on the env

CD is not about releasing everyday.

This is tightly related to feature switches.
The topic of feature switches is coming up again - release responsibility is
transferred to more business-oriented ppl.
The dev team is focused on providing the newest code turned off by a switch.

*Idea:* After the initial release, Aquila's features can be introduced in this way.

A measure of tests being fast:
*** unit < 1ms
*** integration < 50ms
*** acceptance as fast as possible
 
Micro applications as a simpler alternative to micro services.
(e.g. each dev team is responsible for a separate subpage of a big web portal)

First component to extract while migrating to a distributed architecture is the
single sign-on mechanism - the user must be uniformly authenticated across all
applications/services.

*** Branches slow you down
Feature switches as alternatives to branches... wtf

Keeping `if`s in infrastructure objects - factories etc. to keep them out of
domain logic. OK

*Idea:* feature switch task runner plugin -> disabling routes, views etc.
uniformly.

Incremental changes - only for the simplest cases.

Branching by abstraction - analogous to TDD, a situation when feature switches
drive the architecture of your application.
The fact that the new code will land on production in a short time starts to
affect your judgement and the places that are prone to frequent changes should
be extracted to separate entitites (files, objects, traits etc.).

*** Testing
Speed tradeoffs can be made.
Make tests fast by testing only the most important parts of your system.
Hexagonal architecture supports this paradigm - the microkernel needs to be 
thoroughly tested, the various ports and adapters not so much.

*** Monitoring
Crucial part of CD.
The deployed code has to be monitored through SCA and process metrics 
(KPIs, analytics).
If your KPIs start to fall after a deploy then you have a problem - a revert
might be required.
Also the application health has to be monitored constantly so that any errors
can be spotted quickly.
Alerts and reactions to these things must be automated.

*** Infrastructure
Use cloud web services, automate devops... nothing revolutionary
Connect the test environments to mocked depenedencies.
