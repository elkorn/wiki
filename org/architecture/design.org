* Agile architecture

This methodology tries to strike a balance between getting buried in UML,
suffering from paralysis by analysis and having no up-front design at all which
would spur a big ball of mud.

The C4 architecture creation process looks like this:

[[http://www.infoq.com/resource/news/2014/05/minimal-architecture-design/en/resources/agile-architecture-c4.png]]

- *System context*: Consider how the system is going to be used and on what other systems will it be dependent.
- *Sketch up the containers*: A container is a deployable unit (webserver, appserver, database, browser plugin etc.)
    - This involves making technology decisions.
- *Define components*: Components reside within containers and comprise of highly related classes, which together implement a certain feature.
    - Think packages or modules.
    - A component is often a combination of classes in different layers.

After designing the overall structure of the system down to the component level,
it's time to do some non-functional analysis.
The proposed areas of reflection can be described as:
- *Structure*
    - Goal: Understand the significant structural elements and how they fit together, based upon the architectural drivers.
    - Method: Design and decomposition down to containers and components.
- *Risks*
    - Goal: Identify and mitigate the highest priority risks.
    - Method: Risk-storming and concrete experiments.
- *Vision*
    - Goal: Create and communicate a vision for the team to work with.
    - Method: Context, container and component diagrams.

It's important to share the vision with the whole team so that everybody has the
same idea about what has to be implemented.
Diagrams are very helpful as an explanatory medium as well as future reference.

Risk analysis through risk storming is basically the whole team brainstorming
ideas on how to make the architecture collapse or where it could be difficult or
not feasible to implement.
It's recommended to create a PoC or a system prototype during this phase.
