#+FILETAGS: :vimwiki:

* Security
** Node.js - security

*** CSRF protection
#+begin_src javascript
app.use(express.csrf());
app.use(function(req, res, next) {
    res.locals.csrftoken = req.csrfToken();
    next();
}
#+end_src

And then somewhere in the HTML:
#+begin_example
<input type="hidden" name="_csrf" value="{{csrftoken}}">
#+end_example

**** Express CSRF middleware ignores verifying tokens on HTTP `GET`, `OPTIONS` and
`HEAD` requests.
**** Ensure `GET` APIs are non-mutating.

*** Preventing internal implementation disclosure
**** Remove the `X-Powered-By` header.
#+begin_src javascript
app.disable("x-powered-by");
#+end_src

**** Change the default session cookie name (from `connect.sid`)
#+begin_src javascript
app.use(express.session({
    secret: "13375UP4H4X0R",
    key: "yourCusomtKey",
    /* ... */
});
#+end_src

*** XSS protection
**** It's a myth that template libraries handle output encoding by default, making the application safe from XSS attacks.
**** Encode untrusted data for _correct context_, depending on where it will reside.
       - HTML Body
           - & -> `&amp;`
           - < -> `&lt;`
           - > -> `&gt;`
           - " -> `&quot;`
           - ' -> `&#x27;`
           - / -> `&#x2F;`
       - HTML attributes
           - e.g. `<input type="text" name="firstname" value="{untrusted}">`
           - Non-alphanumeric chars -> `&#xHH;` format
       - CSS
           - e.g. `<div style="width={untrusted};">contents</div>`
           - Untrusted ata -> CSS hex encoding (`\HH` or `\HHHHHH`)
       - JS
           - e.g. `<script>var firstName="{untrusted}"</script>`
           - Non-alphanumeric chars -> `\uXXXX;` unicode format
       - URL
           - e.g. `<a href="{untrusted}">Show details</a>`
           - Untrusted data -> `encodeURI()`
       - URL parameter
           - e.g. `<a href="/account?id={untrusted}">Show details</a>`
           - Untrusted data -> `encodeURIComponent()`
**** Use [[https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API][proven utilities]] for encoding.
**** DOM-based XSS: Encode both on the server and client side.
**** Add `HTTPOnly`, `Secure` attributes on the Session cookie:
#+begin_src javascript
app.use(express.session({
    secret: "s3Cur3",
    key: "sessionId",
    cookie: {
        httpOnly: true,
        secure: true
    }
});
#+end_src
**** Add *content security policy* header
#+begin_src javascript
var policy = {
    defaultPolicy: {
        "default-src": ["'self'"],
        "img-src": ["static.example.com"]
    }
}

helmet.csp.policy(policy);
#+end_src

*** HTTP parameter pollution
Express populate HTTP request parameters with the same name in an array.
#+begin_example
// POST firstname=John&firstname=Mary
req.body.firstname
// => ["John", "Mary"]
#+end_example

This mechanism can be exploited by an attacker to:
**** trigger type errors on the server (uncaught errors crash it and cause DoS)
**** modify application behavior (e.g. store arrays in the DB)
**** bypass input validation applied on strings in the code, WAF, browser filters
#+begin_example
["John", "John"] + "Doe"
// => "John, John Doe"
#+end_example

Countermeasures:
**** *Check the expected type* as a part of input validation.
**** Incorporate *input fuzzing* into test suites to discover problems.
**** Implement a *robust error handling mechanism*, using `try/catch`, `domain` and `cluster`.

*** Regular Expression Denial of Service (REDoS)
Evil regexps can take exponential execution time when applied to certain
non-matching inputs. By default, regexps get executed in the event loop thread,
so it can be exploited for DoS attacks.

Evil regexp pattern requiremenets:
**** Grouping with repetition
**** Inside repeated group, repetition (`(a+)+`) or alternation with overlapping (`(a|aa)+`)
**** Example: Input pattern `aaaaaaaaaaaaa!` for a commonly used URL validation regexp
       - 30 input characters take 6sec, 40 take 3hr 46min.


Review the regexps in the code for evil patterns.
Do not use user supplied inputs as regexps.

*** Don't use eval

Indirect forms of `eval`:
#+begin_example
setInterval(String, number);
setTimeout(String, number);
new Function(String);
#+end_example

*** Avoid command injection

`child_process.exec` is actually a `bash` interpreter, not a program launcher.
Do not pass user input to `child_process.exec` to avoid potential commands being injected through subshells.
Using `child_process.execFile` is a safe alternative.

*** Temp files

Instead of creating temporary files (to avoid disk space usage) use Streams.

*** Cookie theft

Any third-party javascript can read cookies on the page it's being run.
To prevent this, set the `HttpOnly` flag on cookies.

*** Content Security Policy
Introduce a security poilicy for your domain through an HTTP header e.g. `Content-Security-Policy: default-src 'self' *.home.com`.

*** Tools
**** Helmet
https://github.com/evilpacket/helmet
Helmet provides middleware for securing a node.js application.

**** npm shrinkwrap
Locks down dependency versions recursively - useful for making releases.

**** retire.js
retire.js detects module versions with known vulnerabilities (both node and browser modules).
