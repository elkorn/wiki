* Estimation

A practical observation - a team is able to perform one "user-significant" task
per developer per working week.

The application used as an examples has a flow like so:

- A new company wants to hire a skilled worker for a temporary position
- Administrative user adds the client details to the system
- Administrative user adds client logins to the system (perhaps we also should let the clients log in with LinkedIn etc?)
- Client logs into the application and completes new position description, including skill requirements
- Temp agency adds a worker to the system
- Temp agency proposes the worker to a position registered by a client (in the future, the worker may register themselves!)
- Client gets notified of new proposals (via email)
- Client views status of all open positions in the system
- External to the system: Client interviews candidate, request further information and makes a decision whether to hire or not
- Client accepts or rejects the worker in the system
- As worker performs work, they register their time in the system
- At the end of a billing period, the system generates billing information to accounting system
- At the end of a salary period, the system generates salary information to the accounting system


** Creating the backlog

Choose the most central parts of the project scope to create the beginning of
the backlog. To accomodate for the learning as you go along, draft the backlog
similarly to this:
- Experimental _feature-1_
- Experimental _feature-2_
- Simplified _feature-1_
- Simplified _feature-2_
- Complete _feature-1_
- Complete _feature-2_

An _experimental_ version of a story is a functionally trivial version that
touches all parts of the technology.
(e.g. have the application leave the logged in client as a hardcoded variable,
write only some basic fields of the posisitions such as title and description)

The _simplified_ version may add more complex properties or some more
functionality such as filtering/searching.

The _complete_ version should be something to put in front of the real users.

For the example application the initial backlog would look like the following:

- Simplified create client account
- Complete create client account
- Simplified login admin user
- Simplified login client user
- Complete login client user
- Simplified add worker
- Complete add worker
- Simplified propose worker for position
- Complete propose worker for position
- Complete confirm worker for position
- Simplified enter timesheet (in this version temp agency enters on behalf of worker)
- Experimental billing report
- Simplified billing report
- Simplified salary report

** Adding non-functional tasks
- Attend training on CSS (the team is rusty in design skills)
- Simplified layout and styling of web pages
- Complete layout and styling of web pages
- Polished layout and styling of web pages (they want it really nice)
- Locate slowest pages and make some performance improvements
- Deploy solution to target platform
- Deploy demo version to wider set of stakeholders
- Deploy pilot version
- Exploratory test of complete flow

** Planning

Having 5 team members + a PM half-time, with people working in pairs, you'd want
to plan to work on three functional areas per week.
This would help minimize merge conflicts.

The team agrees to do five stories/week, but three for the first one (because
everything goes slower then).

The completed backlog would then look like:

- Week 1: Experimental create open position
- Week 1: Experimental list positions
- Week 1: Attend training on CSS
- Week 2: Simplified create open position
- Week 2: Simplified list positions
- Week 2: Simplified create client account
- Week 2: Simplified layout and styling of web pages
- Week 3: Simplified login client user
- Week 3: Deploy solution to target platform
- Week 3: Simplified add worker
- Week 3: Simplified propose worker for position
- Week 3: Simplified enter timesheet (temp agency enters on behalf of worker)
- Week 4: Experimental salary report
- Week 4: Complete layout and styling of web pages
- Week 4: Complete create open positions
- Week 4: Complete list positions
- Week 4: Deploy demo version to wider set of stakeholders
- â€¦
- Week 6: Exploratory test of complete flow
- Week 7: Deploy pilot version

** Presenting the plan

Having a complete timeframe for a pilot release, you should probably add a week
or two of slack.
The amount of added 'real-life' slack depends on the strength of your commitment
and the costs of being wrong.

** Additional notes

- Developer estimates realistically by saying "_by the end of the day_" or "_by the end of the week_".
- Hour-based estimates are to easy to tamper with and useless in the long run.
- Revisiting features (experimental/simplified/complete)discourages gold plating and encourages investment in poorly understood areas.
