= MSc - Kernelization =

Kernelization makes algorithms more efficient by a preprocessing stage, where
the inputs are replaced by a smaller one, called a _kernel_.

The result of solving a problem on the kernel should either be the same as on
the original input, or be easily transformable to it.

Kernelization is often achieved by applying a set of reduction rules, cutting
away parts of the instance that are easy to handle.

It is often possible to find a kernel with guaranteed bounds on the size of a
kernel can be found in polynomial time ($O(n^k)$).
When it is possible, it results in a fixed-parameter tractable algorithm.
Its running time is then the sum of the kernelization step (polynomial) and the
time to solve the kernel (polynomial, but bounded by the parameter).

*Input*: an undirected graph $G$ and a number $k$.

*Output*: A set of at most $k$ vertices that includes the endpoint of every edge
in the graph. If such a set does not exist, a failure exception has to be
thrown.

This problem is NP-hard, meaning it cannot be solved in polynomial time unless
[[P=NP]].

However, the following _reduction rules_ m may be used to kernelize it:

- [[Vertex cover problem kernelization by S.Buss]] (basic)
- [[Linear program relaxation]]
- [[crown reduction + alternating path arguments]]
